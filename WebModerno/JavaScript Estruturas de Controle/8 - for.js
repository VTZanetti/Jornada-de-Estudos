// ---------- WHILE ----------
let contador = 1;

// Estrutura de repeti√ß√£o while: executa enquanto a condi√ß√£o for verdadeira
while (contador <= 10) {
    console.log(`WHILE contador = ${contador}`);
    contador++; // incrementa o contador em 1 a cada intera√ß√£o
}

// ---------- FOR ----------
for (let i = 1; i <= 10; i++) {
    // O 'for' √© ideal quando j√° sabemos o n√∫mero de repeti√ß√µes
    console.log(`FOR contador = ${i}`);
}

// ---------- FOR COM ARRAYS ----------
const notas = [6.7, 7.4, 9.8, 8.1, 7.7];

// Percorre o array de notas usando √≠ndice de 0 at√© o tamanho do array - 1
for (let i = 0; i < notas.length; i++) {
    console.log(`notas = ${notas[i]}`);
}

/*
üß† EXPLICA√á√ÉO DID√ÅTICA:

üîÅ WHILE:
- Usado quando **n√£o sabemos exatamente** quantas vezes o loop vai repetir.
- A condi√ß√£o √© verificada **antes** de cada itera√ß√£o.

üîÅ FOR:
- Usado quando sabemos **exatamente quantas vezes** o la√ßo deve rodar.
- A estrutura j√° cont√©m a inicializa√ß√£o (`let i = 1`), condi√ß√£o (`i <= 10`) e incremento (`i++`).

üîÅ FOR COM ARRAY:
- Ideal para percorrer todos os elementos de um array com base no seu √≠ndice.
- `notas.length` retorna a quantidade de elementos no array, evitando erro de limite.

üí° DICAS EXTRAS:

‚úî Evite deixar o incremento (`contador++`) de fora do `while`, pois pode causar loops infinitos.

‚úî Em arrays, se n√£o precisar do √≠ndice, considere usar `for...of`:
    for (let nota of notas) {
        console.log(nota);
    }

‚úî Use `for...in` se quiser percorrer os √≠ndices de objetos ou arrays:
    for (let i in notas) {
        console.log(i, notas[i]);
    }
*/
