// Fun√ß√£o que retorna um n√∫mero inteiro aleat√≥rio entre 'min' (inclusivo) e 'max' (exclusivo)
function aleatorio(min, max) {
    let numero = Math.random() * (max - min) + min;
    return Math.floor(numero); // Arredonda para baixo e remove as casas decimais
}

// Inicializa a vari√°vel 'opcao' com 0
let opcao = 0;

// Loop while: executa o bloco enquanto a condi√ß√£o (opcao != -1) for verdadeira
while (opcao != -1) {
    opcao = aleatorio(-1, 10); // Sorteia um n√∫mero entre -1 e 9 (inclusive -1, exclusivo 10)
    console.log(`Opcao sorteada foi ${opcao}`);
}

console.log("Finalizado");

/*
üß† EXPLICA√á√ÉO DID√ÅTICA:

üî¢ A fun√ß√£o aleatorio(min, max) utiliza:
    - Math.random(): gera um n√∫mero decimal entre 0 (inclusive) e 1 (exclusivo)
    - Multiplicando por (max - min) e somando min ‚Üí gera um n√∫mero entre min e max
    - Math.floor(): arredonda para baixo, convertendo para n√∫mero inteiro

üéØ Exemplo pr√°tico:
    ‚û§ aleatorio(-1, 10) pode gerar qualquer n√∫mero inteiro entre -1 e 9.

üîÅ O `while` verifica a condi√ß√£o **antes** de executar o bloco:
    - Se a vari√°vel `opcao` for diferente de -1, o loop continua.
    - Quando `opcao` for igual a -1, o la√ßo para e imprime "Finalizado".

üìå A execu√ß√£o termina aleatoriamente, j√° que -1 pode ser sorteado a qualquer momento.

‚úÖ Boas pr√°ticas aplicadas:
- Uso de `let` para declarar `numero` ‚Üí evita cria√ß√£o de vari√°vel global.
- C√≥digo limpo e claro, ideal para simula√ß√µes simples ou loops baseados em eventos aleat√≥rios.

üí° DICA EXTRA:
Se quiser incluir o valor m√°ximo no sorteio, altere a fun√ß√£o para:
    Math.floor(Math.random() * (max - min + 1) + min)
Isso incluir√° tanto `min` quanto `max` no intervalo de poss√≠veis resultados.
*/
