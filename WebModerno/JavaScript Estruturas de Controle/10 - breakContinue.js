const nums = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// ---------- FOR...IN COM BREAK ----------
for (let x in nums) {
    if (x == 5) break; // Interrompe o loop quando o √≠ndice for 5
    console.log(`${x} = ${nums[x]}`);
};

console.log("=========");

// ---------- FOR...IN COM CONTINUE ----------
for (let x in nums) {
    if (x == 5) continue; // Pula a itera√ß√£o quando o √≠ndice for 5
    console.log(`${x} = ${nums[x]}`);
};

// ---------- BREAK COM R√ìTULO (LABEL) ----------
externo: for (let a in nums) {
    for (let b in nums) {
        if (a == 2 && b == 3) break externo; // Sai dos dois loops quando a == 2 e b == 3
        console.log(`Par = ${a}, ${b}`);
    };
};

/*
üß† EXPLICA√á√ÉO DID√ÅTICA:

üîπ `for...in` percorre os **√≠ndices** do array (como strings).
    ‚û§ Ent√£o `x` ser√° "0", "1", ..., at√© o √∫ltimo √≠ndice do array.

üîπ `break`: 
    - Encerra o loop imediatamente ao encontrar a condi√ß√£o.
    - No primeiro exemplo, a repeti√ß√£o para quando `x == 5`, ou seja, no 6¬∫ elemento (√≠ndice 5).

üîπ `continue`:
    - Pula a itera√ß√£o atual e passa para a pr√≥xima.
    - No segundo exemplo, quando `x == 5`, o n√∫mero na posi√ß√£o 5 n√£o √© exibido (valor 6).

üîπ `break` com r√≥tulo (`label:`):
    - Permite **sair de m√∫ltiplos loops aninhados**.
    - Sem o `label`, o `break` sairia apenas do `for interno`.
    - O `label` `externo:` for√ßa a sa√≠da do loop externo ao encontrar a condi√ß√£o.

‚ö†Ô∏è CUIDADO:
- Labels s√£o raramente usados na pr√°tica e podem deixar o c√≥digo menos leg√≠vel.
- Prefira refatorar em fun√ß√µes se a l√≥gica ficar complexa demais.

üí° DICAS:
‚úî Use `break` e `continue` com modera√ß√£o e clareza ‚Äî facilitam o controle, mas podem dificultar a leitura se usados em excesso.

‚úî Em loops aninhados, evite o uso de labels quando poss√≠vel ‚Äî fun√ß√µes auxiliares s√£o mais recomendadas.

‚úî Se estiver usando `for...in` com arrays, lembre-se: `x` √© uma **string**, ent√£o:
    ‚û§ Compara√ß√µes como `x == 5` funcionam por coer√ß√£o impl√≠cita
    ‚û§ Melhor: `Number(x) === 5` para evitar confus√£o
*/
