// Declara uma vari√°vel local ao m√≥dulo (n√£o √© acess√≠vel fora deste arquivo)
let a = 3;

// Cria uma propriedade global no Node.js (acess√≠vel de qualquer lugar)
global.b = 123;

// Adiciona propriedades ao objeto 'this', que em Node.js √© igual a 'module.exports'
this.c = 456;
this.d = false;

// Atribui um novo valor √† propriedade 'c' (sobrescrevendo o valor anterior)
this.c = "Teste";  // Agora this.c vale "Teste" em vez de 456

// Exibe a vari√°vel local 'a' (funciona normalmente)
console.log(a);  // Sa√≠da: 3

// Tenta acessar 'a' atrav√©s do escopo global (n√£o funciona pois 'a' √© local)
console.log(global.a);  // Sa√≠da: undefined

// Acessa 'c' atrav√©s do objeto 'this' (equivalente a module.exports neste contexto)
console.log(this.c);  // Sa√≠da: "Teste"

// Acessa 'c' diretamente pelo objeto de exporta√ß√£o do m√≥dulo
console.log(module.exports.c);  // Sa√≠da: "Teste"

// Verifica se 'this' e 'module.exports' s√£o a mesma coisa (true em Node.js)
console.log(module.exports === this);  // Sa√≠da: true

// Mostra o que est√° sendo exportado por este m√≥dulo
console.log(module.exports);  // Sa√≠da: { c: 'Teste', d: false }

// ===== IMPORTANTE =====
// Se voc√™ fizer isso:
// abc = 3;
// Estar√° criando uma vari√°vel global de forma impl√≠cita (sem let/const/var)
// Isso √© uma M√Å PR√ÅTICA! Evite sempre que poss√≠vel.
// Abaixo, como a linha est√° comentada, a vari√°vel global 'abc' n√£o existe:
console.log(global.abc);  // Sa√≠da: undefined

/*
üí° DICAS DID√ÅTICAS:
- Use SEMPRE let, const ou var para declarar vari√°veis ‚Äî evite criar globais acidentalmente.
- No Node.js, 'this' no escopo do m√≥dulo √© igual a 'module.exports'.
- Para exportar dados de um m√≥dulo, adicione ao 'module.exports' ou 'this'.
- Evite usar 'global' a menos que realmente precise de vari√°veis acess√≠veis em qualquer lugar.

üîÅ EXEMPLO DE EXPORTA√á√ÉO CORRETA:
module.exports = {
  nome: "Jo√£o",
  idade: 30
};

üîÅ EXEMPLO DE IMPORTA√á√ÉO EM OUTRO ARQUIVO:
const pessoa = require('./arquivo');
console.log(pessoa.nome); // Jo√£o
*/
