const pessoa = {
    saudacao: "Bom Dia!!",

    // M√©todo da pessoa que usa 'this' para acessar a propriedade 'saudacao'
    falar() {
        console.log(this.saudacao); // 'this' aponta para o objeto que chama o m√©todo
        // console.log(saudacao) // Esta linha daria erro pois 'saudacao' n√£o est√° no escopo global
    }
};

// Chamada direta do m√©todo dentro do objeto: funciona como esperado
pessoa.falar(); // Sa√≠da: "Bom Dia!!"

// ---------- PROBLEMA COM 'this' ----------

// Aqui a fun√ß√£o √© atribu√≠da a uma vari√°vel fora do contexto do objeto
const falar = pessoa.falar;
falar(); 
// Sa√≠da: undefined
// Por qu√™? Porque o 'this' dentro da fun√ß√£o agora n√£o se refere mais ao objeto 'pessoa',
// mas sim ao contexto global (no navegador seria 'window', no Node √© 'global')
// E no escopo global n√£o existe a propriedade 'saudacao'

// ---------- SOLU√á√ÉO COM bind ----------

// O m√©todo 'bind' retorna uma nova fun√ß√£o com o 'this' fixado no objeto passado
const falarDePessoa = pessoa.falar.bind(pessoa);
falarDePessoa(); // Sa√≠da correta: "Bom Dia!!"

// ---------- Outro exemplo do problema com this ----------
const falar2 = pessoa.falar;
falar2(); // Mesmo problema: 'this' est√° desassociado de 'pessoa' ‚Üí undefined

/*
üìö EXPLICA√á√ÉO DID√ÅTICA:

üîπ Em JavaScript, o valor de 'this' **depende de como a fun√ß√£o √© chamada**, e n√£o de onde ela foi definida.

‚úî Quando voc√™ chama `pessoa.falar()`, o 'this' aponta corretamente para o objeto `pessoa`.

‚ùå Mas se voc√™ fizer `const falar = pessoa.falar`, est√° apenas copiando a fun√ß√£o, **sem o contexto do objeto**.
   O 'this' dentro da fun√ß√£o agora se refere ao objeto global, e n√£o h√° `saudacao` nesse escopo.

üîß Para resolver, usamos `bind()` para **for√ßar o 'this'** a se manter sempre associado ao objeto original.

üí° DICAS:
- Use `.bind(obj)` sempre que for passar m√©todos de objetos para vari√°veis, callbacks, temporizadores etc.
- No lugar de fun√ß√µes tradicionais, fun√ß√µes **arrow (=>)** podem ser √∫teis, pois n√£o alteram o valor de 'this' (herdam do contexto em que foram criadas), mas **n√£o servem como m√©todos quando voc√™ quer usar o 'this' do pr√≥prio objeto**.
*/
