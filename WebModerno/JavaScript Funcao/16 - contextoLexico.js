const valor = "Global"; // vari√°vel definida no escopo global

function minhaFuncao() {
    console.log(valor);   
    // Aqui o JS procura pela vari√°vel "valor" no escopo em que a fun√ß√£o foi definida,
    // n√£o onde ela foi chamada! Como "minhaFuncao" foi criada no escopo global,
    // ela acessa o "valor" global, mesmo sendo chamada dentro da fun√ß√£o "exec".
};

function exec() {
    const valor = "Local"; // escopo local dentro da fun√ß√£o "exec"
    minhaFuncao(); // chamando a fun√ß√£o "minhaFuncao"
};

exec(); // sa√≠da: "Global"

/*
üìò EXPLICA√á√ÉO DID√ÅTICA:

üîπ Quando uma fun√ß√£o √© definida, ela "leva junto" o seu *contexto l√©xico*, ou seja,
o escopo onde foi criada. No caso acima, `minhaFuncao` foi criada no escopo global,
ent√£o ela enxerga as vari√°veis definidas no escopo global, mesmo que seja chamada 
dentro de outro escopo (como dentro de `exec`).

üîπ O que *n√£o* acontece:
A fun√ß√£o *n√£o* passa a "ver" as vari√°veis do escopo de quem a chamou (exec),
ela v√™ somente o escopo onde foi criada!

üìå DICA:
Esse comportamento √© chamado de **escopo l√©xico**, e √© fundamental para entender
como funciona closures, callbacks e outras estruturas mais avan√ßadas em JavaScript.
*/
