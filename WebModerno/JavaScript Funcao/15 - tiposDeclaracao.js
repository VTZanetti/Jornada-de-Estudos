// ‚úÖ Chamada de fun√ß√£o *antes* da defini√ß√£o s√≥ funciona com Function Declaration
console.log(soma(3,4)) // Pode chamar antes da declara√ß√£o!

// ‚ùå As duas chamadas abaixo dariam erro se n√£o estivessem comentadas,
// pois tentam usar fun√ß√µes antes de suas declara√ß√µes como *express√µes*:
// console.log(mult(3,3))
// console.log(sub(3,3))

// ‚úÖ Function Declaration
// Essa forma de declarar uma fun√ß√£o sofre "hoisting", ou seja, o JavaScript
// a "eleva" para o topo do escopo, permitindo que ela seja chamada antes da defini√ß√£o.
function soma(x, y) {
    return x + y;
}

// ‚úÖ Function Expression (Fun√ß√£o An√¥nima atribu√≠da a uma vari√°vel)
// Aqui a fun√ß√£o s√≥ pode ser chamada *depois* de sua defini√ß√£o.
const sub = function(x, y) {
    return x - y;
};
console.log(sub(3, 3)); // Sa√≠da: 0

// ‚úÖ Named Function Expression (Fun√ß√£o com nome, mas ainda √© uma express√£o)
// O nome `mult` ap√≥s o `function` serve apenas para fins de depura√ß√£o e n√£o
// √© acess√≠vel fora da fun√ß√£o. Assim como a anterior, n√£o sofre hoisting.
const mult = function mult(x, y) {
    return x * y;
};
console.log(mult(3, 3)); // Sa√≠da: 9

/*
üìò RESUMO DID√ÅTICO:

üîπ Function Declaration:
   - Forma tradicional: `function nome() {...}`
   - Pode ser chamada antes da defini√ß√£o no c√≥digo (hoisting).
   - Ideal quando voc√™ quer declarar fun√ß√µes utilit√°rias que ser√£o usadas em v√°rios lugares.

üîπ Function Expression:
   - Atribui uma fun√ß√£o (an√¥nima ou nomeada) a uma vari√°vel.
   - N√£o pode ser usada antes da defini√ß√£o.
   - √ötil quando se quer armazenar fun√ß√µes em vari√°veis, arrays, objetos ou passar como par√¢metro.

üîπ Named Function Expression:
   - Igual √† anterior, mas com nome interno.
   - √ötil para facilitar debug (o nome aparece em erros/stack traces).
   - Tamb√©m n√£o sofre hoisting.

üìå DICA:
Sempre que estiver aprendendo, teste o comportamento comentando/descomentando as chamadas
e observe os erros no console para entender bem o momento de "subida" das fun√ß√µes.
*/
