// Fun√ß√£o Factory: padr√£o de projeto para criar objetos de forma flex√≠vel e reutiliz√°vel

function criarProduto(nome, preco){
    return {
        // Atribui√ß√£o curta: nome e preco s√£o usados diretamente como chave e valor
        nome,
        preco,
        desconto: 0.1, // desconto fixo de 10%
    };
};

// Exemplo de uso da fun√ß√£o factory
console.log(criarProduto("Notebook", 2199.49));
console.log(criarProduto("Ipad", 1199.49));

/*
üß† EXPLICA√á√ÉO DID√ÅTICA:

üîπ Esta fun√ß√£o `criarProduto` √© um exemplo de **Factory Function**, ou seja, 
uma fun√ß√£o que retorna um **novo objeto** com base nos par√¢metros fornecidos.

üîπ A grande vantagem desse padr√£o √© que ele permite criar m√∫ltiplos objetos 
com a mesma estrutura sem repetir c√≥digo.

üìå DICAS:
- Use factory functions quando quiser encapsular l√≥gica de cria√ß√£o de objetos.
- Ideal quando os objetos compartilham uma estrutura comum, mas precisam ter dados diferentes.

üß™ SA√çDA ESPERADA:
{ nome: 'Notebook', preco: 2199.49, desconto: 0.1 }
{ nome: 'Ipad', preco: 1199.49, desconto: 0.1 }

Se desejar incluir um c√°lculo do pre√ßo com desconto, pode-se expandir:

    precoFinal: preco * (1 - desconto)
*/
