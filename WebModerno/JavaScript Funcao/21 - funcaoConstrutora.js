// Fun√ß√£o construtora Pessoa (estilo tradicional em JavaScript)
function Pessoa(nome) {
    // Atributo p√∫blico acess√≠vel por this
    this.nome = nome;

    // M√©todo p√∫blico
    this.falar = function () {
        console.log(`Meu nome eh ${this.nome}`);
    };
};

// Criando uma inst√¢ncia de Pessoa usando o operador 'new'
const p1 = new Pessoa("Joao");
p1.falar(); // Sa√≠da: Meu nome eh Joao

/* 
üß† EXPLICA√á√ÉO DID√ÅTICA:

üîπ Em JavaScript, fun√ß√µes tamb√©m podem ser usadas como **construtores**.
   - Quando usamos `new Pessoa("Joao")`, o JavaScript cria um novo objeto e o `this` dentro da fun√ß√£o passa a apontar para esse novo objeto.

üîπ `this.nome = nome` cria uma **propriedade p√∫blica** chamada `nome`.
üîπ `this.falar = function() { ... }` cria um **m√©todo p√∫blico** que pode ser chamado por qualquer inst√¢ncia criada com `new Pessoa`.

üìå DIFEREN√áA ENTRE FUN√á√ÉO CONSTRUTORA E FACTORY FUNCTION:
- **Construtora** usa `this` e deve ser usada com `new`.
- **Factory Function** retorna diretamente um objeto.

‚úÖ DICA:
Evite usar v√≠rgulas em lugar de ponto-e-v√≠rgula em blocos de c√≥digo (`this.nome = nome,`) ‚Äî apesar de funcionar, √© confuso e fora do padr√£o.
*/