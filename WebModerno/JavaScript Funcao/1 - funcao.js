// Fun√ß√£o em JavaScript √© First-Class Object (Citizen)
// Ou seja, pode ser tratada como qualquer outro dado:
// Pode ser armazenada em vari√°veis, passada como argumento, retornada de fun√ß√µes, etc.
// Isso permite trabalhar com Higher-Order Functions (fun√ß√µes de ordem superior)

// ---------- 1. Criar fun√ß√£o de forma literal ----------
function fun1() {
    console.log("Fun√ß√£o fun1 executada");
}; // Fun√ß√£o nomeada tradicional

// ---------- 2. Armazenar fun√ß√£o em uma vari√°vel ----------
const fun2 = function () {
    console.log("Fun√ß√£o fun2 executada");
}; // Fun√ß√£o an√¥nima atribu√≠da a uma constante

// ---------- 3. Armazenar fun√ß√£o dentro de um array ----------
const array = [
    function (a, b) { return a + b }, // fun√ß√£o an√¥nima de soma
    fun1,
    fun2
];
console.log(array[0](2, 5)); // Executa a primeira fun√ß√£o do array: 2 + 5 = 7

// ---------- 4. Armazenar fun√ß√£o como atributo de objeto ----------
const obj = {};
obj.falar = function () {
    return "Fun√ß√£o falar executada";
};
console.log(obj.falar()); // Acessa e executa a fun√ß√£o dentro do objeto

// ---------- 5. Passar fun√ß√£o como par√¢metro ----------
function run(fun) {
    fun(); // Executa a fun√ß√£o recebida como argumento
};

run(function () {
    console.log("Executando fun√ß√£o passada como par√¢metro");
});

// ---------- 6. Retornar fun√ß√£o de outra fun√ß√£o ----------
function soma(a, b) {
    // Retorna uma nova fun√ß√£o que usa o valor de a e b
    return function (c) {
        console.log(a + b + c); // Utiliza closure para manter acesso a 'a' e 'b'
    };
};

soma(9, 1)(10); // Chamada direta e encadeada: (9 + 1 + 10) = 20

// Podemos tamb√©m armazenar o retorno (uma nova fun√ß√£o) em uma vari√°vel:
const cincoMais = soma(2, 3); // soma(2, 3) retorna uma fun√ß√£o esperando o valor de 'c'
cincoMais(5); // (2 + 3 + 5) = 10

/*
EXPLICA√á√ÉO DID√ÅTICA:

üîπ First-Class Functions:
    ‚û§ Fun√ß√µes tratadas como dados: podem ser atribu√≠das, passadas, retornadas etc.

üîπ Higher-Order Functions:
    ‚û§ Fun√ß√µes que:
        - Recebem outras fun√ß√µes como argumentos
        - Ou retornam novas fun√ß√µes

üîπ Closure:
    ‚û§ A fun√ß√£o retornada por `soma` "lembra" os valores de `a` e `b`
    ‚û§ Mesmo ap√≥s `soma` ter sido executada, os valores ainda est√£o acess√≠veis dentro da fun√ß√£o interna

DICAS:
‚úî Esse modelo permite criar fun√ß√µes mais gen√©ricas, reutiliz√°veis e flex√≠veis.
‚úî Muito usado em programa√ß√£o funcional, bibliotecas modernas, e callbacks em JS.
‚úî Fun√ß√µes retornando fun√ß√µes s√£o √∫teis para personalizar comportamentos ou construir fun√ß√µes parciais.
*/
