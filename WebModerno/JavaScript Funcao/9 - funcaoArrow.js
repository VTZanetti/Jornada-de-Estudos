let comparaComThis = function(param) {
    console.log(this === param);
};

comparaComThis(global); // true em ambiente Node.js, pois fora de uma fun√ß√£o o `this` √© `global` (ou `globalThis`)

// Criamos um novo objeto
const obj = {};

// A fun√ß√£o agora √© explicitamente ligada ao `obj` usando bind
comparaComThis = comparaComThis.bind(obj);

comparaComThis(global); // false: agora `this` est√° vinculado a `obj`
comparaComThis(obj);    // true: `this` foi fixado em `obj`

// Agora, uma fun√ß√£o arrow
let comparaComThisArrow = param => console.log(this === param);

// No contexto do m√≥dulo Node.js, `this` dentro de arrow function aponta para `module.exports`
comparaComThisArrow(global);          // false
comparaComThisArrow(module.exports);  // true

// Tentamos "bindar" a arrow function a um novo objeto
comparaComThisArrow = comparaComThisArrow.bind(obj);

// Mesmo com bind, o `this` n√£o muda em arrow functions!
comparaComThisArrow(obj); // Ainda ser√° false!

/*
üìö EXPLICA√á√ÉO DID√ÅTICA:

üîπ Fun√ß√µes tradicionais (`function`) t√™m seu pr√≥prio `this` din√¢mico, que depende de como a fun√ß√£o √© chamada.
    - Por isso, podemos usar `.bind()`, `.call()` ou `.apply()` para mudar seu `this`.

üîπ Arrow functions (`=>`) N√ÉO possuem seu pr√≥prio `this`. 
    - Elas herdam o `this` do contexto em que foram definidas.
    - O `.bind()` **n√£o afeta** arrow functions!

‚úî RESUMO:

| Tipo de fun√ß√£o       | `this` pode ser alterado com `.bind()`? | Herda `this` do contexto externo? |
|----------------------|------------------------------------------|-----------------------------------|
| Fun√ß√£o tradicional   | ‚úÖ Sim                                   | ‚ùå N√£o                            |
| Arrow function       | ‚ùå N√£o                                   | ‚úÖ Sim                            |

üí° DICA:
Use arrow functions quando quiser manter o `this` do contexto onde a fun√ß√£o foi definida ‚Äî especialmente √∫til em callbacks.

*/
