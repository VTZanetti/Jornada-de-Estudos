function getPreco(imposto = 0, moeda = "R$") {
    return `${moeda} ${this.preco * (1 - this.desc) * (1 + imposto)}`;
}

// Objeto com mÃ©todo que usa `this`
const produto = {
    nome: 'notebook',
    preco: 4589,
    desc: 0.15,
    getPreco // associa a funÃ§Ã£o ao objeto
};

// Atribuindo valores ao escopo global (Node.js)
global.preco = 20;
global.desc = 0.1;

console.log(getPreco()); // Usa `this` do escopo global â†’ R$ 19.800000000000004
console.log(produto.getPreco()); // Usa `this` do objeto produto â†’ R$ 3900.65

// Criando outro objeto
const carro = { preco: 49990, desc: 0.20 };

// call: executa funÃ§Ã£o com `this` definido e argumentos separados
console.log(getPreco.call(carro)); // â†’ R$ 39992

// apply: executa funÃ§Ã£o com `this` e argumentos em array
console.log(getPreco.apply(carro)); // â†’ R$ 39992

// call com parÃ¢metros personalizados
console.log(getPreco.call(carro, 0.17, "$")); // â†’ $ 46790.64

// apply com os mesmos parÃ¢metros em array
console.log(getPreco.apply(carro, [0.17, "$"])); // â†’ $ 46790.64

/*
ðŸ§  RESUMO IMPORTANTE:

ðŸ”¹ `this`: representa o contexto de onde a funÃ§Ã£o estÃ¡ sendo executada.
ðŸ”¹ `.call(thisArg, arg1, arg2...)`: executa com o `this` e argumentos passados separadamente.
ðŸ”¹ `.apply(thisArg, [arg1, arg2...])`: mesma coisa, mas os argumentos vÃ£o em array.

ðŸ“Œ DICA:
VocÃª usa `call` ou `apply` quando quer reutilizar uma funÃ§Ã£o em diferentes objetos,
modificando o contexto (`this`) dinamicamente.
*/
