// Closure conceito -> √© o escopo criado quando uma fun√ß√£o √© declarada
// Esse escopo permite √† fun√ß√£o acessar e manipular vari√°veis externas √† fun√ß√£o

// Contexto l√©xico em a√ß√£o!!!

const x = "Global"; // vari√°vel no escopo global

function fora () {
    const x = "Local"; // vari√°vel no escopo da fun√ß√£o 'fora'

    function dentro() {
        return x; // acessa a vari√°vel 'x' do escopo em que foi definida (fun√ß√£o 'fora')
    };

    return dentro; // retorna a fun√ß√£o 'dentro' sem execut√°-la ainda
};

const minhaFuncao = fora(); // 'minhaFuncao' agora cont√©m a fun√ß√£o 'dentro' com o escopo fechado da fun√ß√£o 'fora'
console.log(minhaFuncao()); // sa√≠da: "Local"

/*
üìò EXPLICA√á√ÉO DID√ÅTICA:

üîπ O conceito de **closure** √© fundamental em JavaScript. Ele ocorre quando uma fun√ß√£o 
√© capaz de "lembrar" do ambiente onde foi criada, mesmo ap√≥s esse ambiente j√° ter sido 
encerrado (como o t√©rmino da execu√ß√£o de `fora()`).

üîπ No exemplo acima, a fun√ß√£o `dentro` √© retornada por `fora` e atribu√≠da √† constante 
`minhaFuncao`. Quando executamos `minhaFuncao()`, a fun√ß√£o ainda tem acesso √† vari√°vel `x`
definida em `fora()` ‚Äî isso √© o closure em a√ß√£o!

üìå DICA:
Closures s√£o amplamente usados em JavaScript, especialmente em:
- Fun√ß√µes que retornam outras fun√ß√µes
- Callbacks com estado preservado
- Cria√ß√£o de fun√ß√µes com escopos privados
*/
