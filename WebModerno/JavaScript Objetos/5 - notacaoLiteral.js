// ğŸ“¦ Trabalhando com objetos em JavaScript â€“ Conceitos Ãºteis e sintaxe moderna

// âœ… Criando constantes com valores simples
const a = 1;
const b = 2;
const c = 3;

// ğŸ§± Forma tradicional de criar um objeto atribuindo os nomes das propriedades explicitamente
const obj1 = { a: a, b: b, c: c };

// ğŸ§  Forma moderna (a partir do ES6): quando o nome da variÃ¡vel e o nome da chave sÃ£o iguais,
// vocÃª pode omitir a repetiÃ§Ã£o e escrever apenas uma vez
const obj2 = { a, b, c };

// ğŸ“Œ Resultado: obj1 e obj2 sÃ£o objetos com as mesmas propriedades e valores
console.log(obj1, obj2); // SaÃ­da: { a: 1, b: 2, c: 3 } { a: 1, b: 2, c: 3 }


// ğŸ§  CriaÃ§Ã£o dinÃ¢mica de propriedades em objetos

// ğŸ”¤ Suponha que queremos criar uma propriedade com um nome dinÃ¢mico (armazenado numa variÃ¡vel)
const nomeAttr = "nota";     // chave dinÃ¢mica
const valorAttr = 7.87;      // valor associado

// ğŸ§± Forma tradicional de adicionar essa chave ao objeto:
const obj3 = {};
obj3[nomeAttr] = valorAttr; // usando colchetes [] para definir a propriedade com base na variÃ¡vel

console.log(obj3); // SaÃ­da: { nota: 7.87 }

// âœ… Forma moderna: jÃ¡ criar o objeto com a chave dinÃ¢mica usando colchetes diretamente na definiÃ§Ã£o
const obj4 = {
    [nomeAttr]: valorAttr  // chave entre colchetes indica que o nome vem de uma variÃ¡vel
};

// Resultado: obj4 tambÃ©m serÃ¡ { nota: 7.87 }


// ğŸ”§ Definindo funÃ§Ãµes como mÃ©todos de um objeto

const obj5 = {
    // ğŸ§± Forma tradicional de declarar uma funÃ§Ã£o como propriedade
    funcao1: function() {
        // lÃ³gica aqui
    },

    // âœ… Forma moderna (ES6+): declaraÃ§Ã£o mais enxuta de mÃ©todos dentro de objetos
    funcao2() {
        // lÃ³gica aqui
    },
};

// ğŸ“Œ Ambas as funÃ§Ãµes funcionam da mesma maneira, a diferenÃ§a estÃ¡ na sintaxe
// Isso permite organizar melhor o cÃ³digo e economizar escrita
console.log(obj5); // SaÃ­da: objeto com dois mÃ©todos: funcao1 e funcao2