// üèóÔ∏è CLASSES EM JAVASCRIPT ‚Äì SINTAXE MODERNA E ORIENTADA A OBJETOS (ES6+)

// üß± Definindo uma classe b√°sica chamada Pessoa
class Pessoa {
    // üë∑ O m√©todo constructor √© chamado automaticamente quando um objeto √© criado a partir da classe
    constructor(nome, idade) {
        // üîê Propriedades do objeto (cada inst√¢ncia ter√° seu pr√≥prio nome e idade)
        this.nome = nome;
        this.idade = idade;
    }

    // üì£ M√©todo comum da classe ‚Äì todas as inst√¢ncias ter√£o acesso a ele
    apresentar() {
        console.log(`Ol√°, meu nome √© ${this.nome} e tenho ${this.idade} anos.`);
    }
}

// üî® Criando inst√¢ncias (objetos) da classe Pessoa usando a palavra-chave 'new'
const pessoa1 = new Pessoa("Jo√£o", 25);
const pessoa2 = new Pessoa("Maria", 30);

// üé¨ Chamando m√©todos das inst√¢ncias
pessoa1.apresentar(); // Sa√≠da: Ol√°, meu nome √© Jo√£o e tenho 25 anos.
pessoa2.apresentar(); // Sa√≠da: Ol√°, meu nome √© Maria e tenho 30 anos.


// üë®‚Äçüë©‚Äçüëß HERAN√áA ‚Äì Uma classe pode herdar de outra usando a palavra-chave 'extends'

class Funcionario extends Pessoa {
    constructor(nome, idade, cargo) {
        // üîÑ Chama o constructor da classe pai (Pessoa)
        super(nome, idade);
        this.cargo = cargo;
    }

    // üîß Sobrescrevendo ou adicionando m√©todos
    apresentar() {
        console.log(`Sou ${this.nome}, tenho ${this.idade} anos e trabalho como ${this.cargo}.`);
    }
}

// üéØ Criando um objeto da subclasse
const funcionario1 = new Funcionario("Carlos", 40, "Desenvolvedor");

funcionario1.apresentar(); 
// Sa√≠da: Sou Carlos, tenho 40 anos e trabalho como Desenvolvedor.


// üìå M√âTODOS EST√ÅTICOS ‚Äì Pertencem √† classe, n√£o √†s inst√¢ncias
class Util {
    static saudacao() {
        console.log("Bem-vindo ao sistema!");
    }
}

Util.saudacao(); // Chamado diretamente pela classe, sem instanciar

// ‚ùå Utilizando o m√©todo est√°tico por inst√¢ncia causaria erro:
// const u = new Util();
// u.saudacao(); ‚Üê Isso n√£o funciona


// üß† ENCAPSULAMENTO COM GETTERS E SETTERS

class Produto {
    constructor(nome, preco) {
        this.nome = nome;
        this._preco = preco; // propriedade "semi-privada" por conven√ß√£o (underline)
    }

    // üîç Getter ‚Äì acessa a propriedade como se fosse um atributo
    get preco() {
        return this._preco;
    }

    // ‚úèÔ∏è Setter ‚Äì permite valida√ß√£o antes de modificar o valor
    set preco(valor) {
        if (valor > 0) {
            this._preco = valor;
        } else {
            console.log("Pre√ßo inv√°lido!");
        }
    }
}

const p1 = new Produto("Notebook", 3000);
console.log(p1.preco); // 3000

p1.preco = -100;       // N√£o ser√° aceito, pois √© inv√°lido
console.log(p1.preco); // Ainda 3000

p1.preco = 2500;       // Valor aceito
console.log(p1.preco); // 2500


/*
üìò RESUMO:
- class: define um modelo (molde) para objetos.
- constructor: m√©todo executado automaticamente na cria√ß√£o de inst√¢ncias.
- this: refere-se √† inst√¢ncia atual.
- extends: heran√ßa entre classes.
- super: chama o constructor da classe pai.
- m√©todos: fun√ß√µes associadas ao comportamento do objeto.
- m√©todos est√°ticos: pertencem √† classe, n√£o √†s inst√¢ncias.
- getter/setter: controlam acesso a propriedades com l√≥gica interna.
*/
