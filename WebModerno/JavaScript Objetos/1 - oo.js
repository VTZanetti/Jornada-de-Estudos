// C√ìDIGO N√ÉO EXECUT√ÅVEL ‚Äì Exemplo te√≥rico sobre paradigmas de programa√ß√£o

// üõ†Ô∏è Paradigma Procedural (Programa√ß√£o Estruturada)
processamento(valor1, valor2, valor3);
// üëâ Foco em fun√ß√µes: dados s√£o passados como par√¢metros e manipulados externamente.

// üß± Paradigma Orientado a Objetos (OO)
const objeto = {
    valor: 10,
    valor1: 20,
    valor2: 30,
    processamento() {
        // üëâ Foco agora est√° no pr√≥prio objeto
        // A l√≥gica √© encapsulada dentro dele
        console.log(this.valor + this.valor1 + this.valor2);
    }
};

objeto.processamento(); // üß† "O objeto tem comportamento" (m√©todo ligado aos seus dados)

// üß† PRINC√çPIOS IMPORTANTES DA ORIENTA√á√ÉO A OBJETOS:

// 1. Abstra√ß√£o:
//    - Capturar os detalhes essenciais do mundo real, ignorando o que √© irrelevante.
//    - Exemplo: um objeto `Carro` abstrai detalhes como `modelo`, `motor`, `acelerar()`.

// 2. Encapsulamento:
//    - Esconder os detalhes internos e expor apenas uma interface p√∫blica segura.
//    - Voc√™ usa um m√©todo sem precisar saber como ele funciona internamente.

// 3. Heran√ßa:
//    - Um objeto pode herdar caracter√≠sticas (atributos/m√©todos) de outro.
//    - Exemplo: `classe Carro` ‚Üí `classe Ferrari extends Carro`

// 4. Polimorfismo:
//    - Um mesmo m√©todo pode se comportar de forma diferente em objetos distintos.
//    - Exemplo: `animal.falar()` pode emitir sons diferentes se o objeto for um `Cachorro` ou `Gato`

/*
üìå Em resumo:
- Procedural: foco em fun√ß√µes e procedimentos.
- OO: foco em objetos que possuem dados (estado) e comportamentos (m√©todos).
- OO ajuda a modelar sistemas mais pr√≥ximos da realidade, facilita manuten√ß√£o e reutiliza√ß√£o de c√≥digo.
*/
