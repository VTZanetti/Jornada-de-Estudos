// ðŸ§± EXEMPLOS DE CRIAÃ‡ÃƒO DE OBJETOS EM JAVASCRIPT (FOCO EM ORIENTAÃ‡ÃƒO A OBJETOS)

// ðŸ“Œ 1. NotaÃ§Ã£o literal (forma mais comum e simples de criar objetos)
const obj1 = {}; // Cria um objeto vazio
console.log("obj1 criado com notaÃ§Ã£o literal:", obj1); // Resultado: {}

// ðŸ“Œ 2. Usando o construtor nativo da linguagem: Object
// Object Ã© uma funÃ§Ã£o construtora de objetos padrÃ£o no JavaScript
console.log("Tipos:");
console.log(typeof Object, typeof new Object()); // 'function', 'object'

const obj2 = new Object(); // Cria um novo objeto usando o construtor Object
console.log("obj2 criado com new Object:", obj2); // Resultado: {}

// ðŸ“Œ 3. FunÃ§Ã£o Construtora (permite criar mÃºltiplas instÃ¢ncias com comportamento encapsulado)
function Produto(nome, preco, desconto) {
    // this.nome Ã© uma propriedade pÃºblica acessÃ­vel fora da funÃ§Ã£o
    this.nome = nome;

    // MÃ©todo pÃºblico que retorna o preÃ§o com desconto
    this.getPrecoComDesconto = () => {
        return preco * (1 - desconto); // preco e desconto sÃ£o mantidos em closure
    };
}

const p1 = new Produto("Caneta", 7.99, 0.15);
const p2 = new Produto("Notebook", 2998.99, 0.25);
console.log("PreÃ§os com desconto (funÃ§Ã£o construtora):");
console.log(p1.getPrecoComDesconto(), p2.getPrecoComDesconto()); // 6.7915, 2249.24

// ðŸ“Œ 4. FunÃ§Ã£o Factory (retorna diretamente um novo objeto)
function criarFuncionario(nome, salarioBase, faltas) {
    return {
        nome,
        salarioBase,
        faltas,
        // MÃ©todo interno que calcula o salÃ¡rio final com base nas faltas
        getSalario() {
            return (salarioBase / 30) * (30 - faltas);
        }
    };
}

const f1 = criarFuncionario("JoÃ£o", 7980, 4); // 26 dias trabalhados
const f2 = criarFuncionario("Maria", 11400, 1); // 29 dias trabalhados

console.log("SalÃ¡rios calculados (funÃ§Ã£o factory):");
console.log(f1.getSalario(), f2.getSalario()); // 6928, 11020

// ðŸ“Œ 5. Object.create(null) â€” cria um objeto sem herdar de Object.prototype
// Isso resulta em um objeto "limpo", ideal para armazenar dados sem risco de herdar mÃ©todos nativos
const filha = Object.create(null);
filha.nome = "Ana";
console.log("Objeto criado com Object.create(null):");
console.log(filha); // { nome: "Ana" }

// ðŸ“Œ 6. JSON.parse() â€” converte uma string JSON em um objeto JavaScript
const fromJSON = JSON.parse(`{"info": "Sou um JSON"}`); // A string deve estar no formato JSON vÃ¡lido
console.log("Objeto criado a partir de JSON:");
console.log(fromJSON.info); // "Sou um JSON"

/* ðŸ§  REFORÃ‡O CONCEITUAL SOBRE OO EM JAVASCRIPT

ðŸ“Œ AbstraÃ§Ã£o:
   - VocÃª cria objetos que representam entidades do mundo real, com propriedades e mÃ©todos relevantes.

ðŸ“Œ Encapsulamento:
   - Os dados e comportamentos estÃ£o agrupados no mesmo objeto.
   - VariÃ¡veis internas da funÃ§Ã£o construtora ficam "protegidas" por closures (escopo privado).

ðŸ“Œ HeranÃ§a:
   - Objetos podem herdar propriedades e mÃ©todos via prototype ou com `class` e `extends` (ES6+).

ðŸ“Œ Polimorfismo:
   - Objetos diferentes podem ter mÃ©todos com o mesmo nome mas comportamentos distintos.

âœ¨ Com isso, o JavaScript permite vÃ¡rios estilos de criaÃ§Ã£o de objetos, favorecendo tanto paradigma procedural quanto orientaÃ§Ã£o a objetos.
*/
